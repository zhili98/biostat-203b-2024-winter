---
title: "Biostat 203B Homework 3"
subtitle: "Due Feb 23 @ 11:59PM"
author: "Zhi Li, UID: 506333161"
format:
  html:
    theme: cosmo
    embed-resources: true
    number-sections: false
    toc: true
    toc-depth: 4
    toc-location: left
    code-fold: false
execute:
  eval: false    
---

Display machine information for reproducibility:
```{r}
sessionInfo()
```

Load necessary libraries (you can add more as needed).
```{r, eval = TRUE}
library(arrow)
library(gtsummary)
library(memuse)
library(pryr)
library(R.utils)
library(tidyverse)
library(readr)
```

Display your machine memory.
```{r}
memuse::Sys.meminfo()
```

In this exercise, we use tidyverse (ggplot2, dplyr, etc) to explore the [MIMIC-IV](https://mimic.mit.edu/docs/iv/) data introduced in [homework 1](https://ucla-biostat-203b.github.io/2024winter/hw/hw1/hw1.html) and to build a cohort of ICU stays.

## Q1. Visualizing patient trajectory

Visualizing a patient's encounters in a health care system is a common task in clinical data analysis. In this question, we will visualize a patient's ADT (admission-discharge-transfer) history and ICU vitals in the MIMIC-IV data.

### Q1.1 ADT history

A patient's ADT history records the time of admission, discharge, and transfer in the hospital. This figure shows the ADT history of the patient with `subject_id` 10001217 in the MIMIC-IV data. The x-axis is the calendar time, and the y-axis is the type of event (ADT, lab, procedure). The color of the line segment represents the care unit. The size of the line segment represents whether the care unit is an ICU/CCU. The crosses represent lab events, and the shape of the dots represents the type of procedure. The title of the figure shows the patient's demographic information and the subtitle shows top 3 diagnoses.

![](10001217_adt.png)
Do a similar visualization for the patient with `subject_id` 10013310 using ggplot.

Hint: We need to pull information from data files `patients.csv.gz`, `admissions.csv.gz`, `transfers.csv.gz`, `labevents.csv.gz`, `procedures_icd.csv.gz`, `diagnoses_icd.csv.gz`, `d_icd_procedures.csv.gz`, and `d_icd_diagnoses.csv.gz`. For the big file `labevents.csv.gz`, use the Parquet format you generated in Homework 2. For reproducibility, make the Parquet folder `labevents_pq` available at the current working directory `hw3`, for example, by a symbolic link. Make your code reproducible.

#### Answer

```{r, eval = TRUE}
patients_tble <- read_csv("~/mimic/hosp/patients.csv.gz")
patients_tble
admissions_tble <- read_csv("~/mimic/hosp/admissions.csv.gz")
admissions_tble
transfers_tble <- read_csv("~/mimic/hosp/transfers.csv.gz")
transfers_tble
labevents_tble <- read_parquet("labevents_pq/part-0.parquet") 
procedures_icd_tble <- read_csv("~/mimic/hosp/procedures_icd.csv.gz")
procedures_icd_tble
diagnoses_icd_tble <- read_csv("~/mimic/hosp/diagnoses_icd.csv.gz")
diagnoses_icd_tble
d_icd_procedures_tble <- read_csv("~/mimic/hosp/d_icd_procedures.csv.gz")
d_icd_procedures_tble
d_icd_diagnoses_tble <- read_csv("~/mimic/hosp/d_icd_diagnoses.csv.gz")
d_icd_diagnoses_tble
```

Import `transfer.csv.gz` as a tibble `sid_adt`:
```{r, eval = TRUE}
sid <- 10013310

sid_adt <- read_csv("~/mimic/hosp/transfers.csv.gz") |>
  filter(subject_id == sid) |>
  print(width = Inf)
```

Store patient's demographic information as `age`, `sex`, and `race`:
```{r, eval = TRUE}
age <- patients_tble %>%
  filter(subject_id == sid) %>%
  pull(anchor_age)

sex <- patients_tble %>%
  filter(subject_id == sid) %>%
  pull(gender)

race <- admissions_tble %>%
  filter(subject_id == sid) %>%
  distinct(race) %>%
  pull()
```

Store the top 3 diagnoses as `top3_diag`:
```{r, eval = TRUE}
top3_diag_icd <- diagnoses_icd_tble %>%
  filter(subject_id == sid) %>%
  slice_head(n = 3) %>%
  pull(icd_code)
top3_diag_icd

top3_diag <- d_icd_diagnoses_tble %>%
  filter(icd_code %in% top3_diag_icd) %>%
  pull(long_title)
top3_diag
```

Subset `labevents_tble` to `sid_lab`:
```{r, eval = TRUE}
sid_lab <- labevents_tble %>%
  filter(subject_id == sid) %>%
  select(charttime)
sid_lab
```

Subset `procedures_icd_tble`:
```{r, eval = TRUE}
sid_procedure <- procedures_icd_tble %>%
  filter(subject_id == sid) %>%
  select(chartdate, icd_code)
sid_procedure <- left_join(sid_procedure, d_icd_procedures_tble, by = "icd_code") %>%
  select(chartdate, long_title)
sid_procedure$chartdate <- sid_procedure$chartdate %>% as_datetime()
sid_procedure
```

Generate the final plot:
```{r, eval = TRUE, fig.width=13, fig.height=7}
  ggplot() +
  # ADT
  geom_segment(data = sid_adt %>%
                 filter(eventtype != "discharge"),
               aes(x = intime,
                   xend = outtime,
                   y = "ADT",
                   yend = "ADT",
                   color = careunit,
                   linewidth = str_detect(careunit, "(ICU|CCU)"))) +
  # Lab
  geom_point(data = sid_lab,
             aes(x = charttime,
                 y = "Lab"),
             shape = 3,
             size = 3) +
  # Procedure
  geom_point(data = sid_procedure,
             aes(x = chartdate,
                 y = "Procedure",
                 shape = long_title,
                 size = 3)) +
  scale_shape_manual(values = c(2:10)) +
  #guides(shape = guide_legend(title = "Procedure")) +
  guides(linewidth = "none",
         size = "none",
         color = guide_legend(title = "Care Unit"),
         shape = guide_legend(title = "Procedure", nrow = 5)) +
  labs(
    x = "Calendar Time",
    y = "",
    title = str_c("Patient ", sid, ", ", sex, ", ", age, " years old, ", race),
    subtitle = str_c(top3_diag[1],"\n", top3_diag[2],"\n", top3_diag[3])
  ) +
  theme_light() +
  theme(legend.position = "bottom",
        legend.box = "vertical") +
  scale_y_discrete(limits = c("Procedure", "Lab", "ADT"))
```

### Q1.2 ICU stays

ICU stays are a subset of ADT history. This figure shows the vitals of the patient `10001217` during ICU stays. The x-axis is the calendar time, and the y-axis is the value of the vital. The color of the line represents the type of vital. The facet grid shows the abbreviation of the vital and the stay ID.

![](10001217_icu.png)

Do a similar visualization for the patient `10013310`.

#### Answer

Create a .parquet file for `chartevents.csv`:
```{r, eval = FALSE}
# I chose arrow::open_csv_dataset() for HW2 Q3, so I have to convert it into
# a .parqeut file in this HW.
arrow::open_csv_dataset("/home/zhili/203b-hw/hw2/chartevents.csv") %>%
  filter(itemid %in% c(220045, 220180, 220179, 223761, 220210)) %>%
  arrow::write_dataset(format = "parquet", 
                       path = "/home/zhili/203b-hw/hw2/chartevents_pq")
```

Read in the .parquet file:
```{r, eval = TRUE}
chartevents_tble <- read_parquet("chartevents_pq/part-0.parquet") %>%
  filter(subject_id == sid)
chartevents_tble

chartevents_tble$itemid <- as.factor(chartevents_tble$itemid)
```

Generate the plot:
```{r, eval = TRUE}
# labeling the itemid
vital_labels <- c(`220045` = "HR", 
                  `220180` = "NBPd",
                  `220179` = "NBPs", 
                  `220210` = "RR",
                  `223761` = "Temperature")

chartevents_tble$itemid <- factor(chartevents_tble$itemid, levels = names(vital_labels))
```

```{r, eval = TRUE, fig.width=10, fig.height=7}
ggplot(chartevents_tble, aes(x = charttime, y = valuenum)) +
  geom_line(aes(color = itemid)) +
  geom_point(aes(color = itemid)) +
  facet_grid(itemid ~ stay_id, 
             scales = "free", 
             labeller = labeller(itemid = vital_labels)) +
  labs(
    x = "Calendar Time",
    y = "Vital",
    title = str_c("Patient ", sid, " ICU stays - Vitals")
  ) +
  theme_light() +
  guides(color = "none")
```

## Q2. ICU stays

`icustays.csv.gz` (<https://mimic.mit.edu/docs/iv/modules/icu/icustays/>) contains data about Intensive Care Units (ICU) stays. The first 10 lines are
```{bash}
zcat < ~/mimic/icu/icustays.csv.gz | head
```

### Q2.1 Ingestion

Import `icustays.csv.gz` as a tibble `icustays_tble`.

#### Answer:

```{r, eval = TRUE}
icustays_tble <- read_csv("~/mimic/icu/icustays.csv.gz")
icustays_tble
```

### Q2.2 Summary and visualization

How many unique `subject_id`? Can a `subject_id` have multiple ICU stays? Summarize the number of ICU stays per `subject_id` by graphs. 

#### Answer:

There are 50,920 unique `subject_id`s. A `subject_id` can have multiple ICU stays as shown below. The patient with `subject_id` 18358138 has 37 ICU stays, the most among all patients.

```{r, eval = TRUE}
icustays_tble %>% distinct(subject_id)

icustay_count <- icustays_tble %>%
  count(subject_id) %>%
  arrange(desc(n)) %>%
  print(width = Inf)
```

```{r, eval = TRUE}
icustay_count %>%
  ggplot(aes(x = n)) +
  geom_bar(color = "darkblue",
           fill = "lightskyblue") +
  labs(
    x = "Number of ICU stays",
    y = "Number of patients",
    title = "Number of ICU stays per patient"
  ) +
  theme_light()

icustay_count %>%
  filter(n > 5) %>%
  ggplot(aes(x = n)) +
  geom_bar(color = "darkblue",
           fill = "lightskyblue") +
  labs(
    x = "Number of ICU stays",
    y = "Number of patients",
    title = "Number of ICU stays per patient (stays >= 6)"
  ) +
  scale_x_continuous(breaks = seq(6, 37, 1)) +
  theme_light()
```

## Q3. `admissions` data

Information of the patients admitted into hospital is available in `admissions.csv.gz`. See <https://mimic.mit.edu/docs/iv/modules/hosp/admissions/> for details of each field in this file. The first 10 lines are
```{bash}
zcat < ~/mimic/hosp/admissions.csv.gz | head
```

### Q3.1 Ingestion

Import `admissions.csv.gz` as a tibble `admissions_tble`.

#### Answer:

```{r, eval = TRUE}
admissions_tble <- read_csv("~/mimic/hosp/admissions.csv.gz")
admissions_tble
```

### Q3.2 Summary and visualization

Summarize the following information by graphics and explain any patterns you see.

- number of admissions per patient  
- admission hour (anything unusual?)  
- admission minute (anything unusual?)  
- length of hospital stay (from admission to discharge) (anything unusual?)  

According to the [MIMIC-IV documentation](https://mimic.mit.edu/docs/iv/about/concepts/#date-shifting), 

> All dates in the database have been shifted to protect patient confidentiality. Dates will be internally consistent for the same patient, but randomly distributed in the future. Dates of birth which occur in the present time are not true dates of birth. Furthermore, dates of birth which occur before the year 1900 occur if the patient is older than 89. In these cases, the patient’s age at their first admission has been fixed to 300.

#### Answer:

Transform the data and summarize the information:

```{r, eval = TRUE}
adm_count <- admissions_tble %>%
  count(subject_id)
adm_count

adm_hour <- admissions_tble %>%
  select(admittime) %>%
  pull() %>%
  format("%H") %>%
  as_tibble()
adm_hour

adm_minute <- admissions_tble %>%
  select(admittime) %>%
  pull() %>%
  format("%M") %>%
  as_tibble()
adm_minute

adm_los <- admissions_tble %>%
  mutate(los = as.numeric(dischtime - admittime, units = "hours")) %>%
  select(los)
adm_los
```

Plot the transformed data:

**Number of admissions per patient**
```{r, eval = TRUE}
adm_count %>%
  ggplot(aes(x = n)) +
  geom_histogram(binwidth = 1,
                 color = "darkblue",
                 fill = "lightskyblue") +
  labs(
    x = "Number of admissions",
    y = "Number of patients",
    title = "Number of admissions per patient"
  ) +
  geom_vline(xintercept = 10, color = "red") +
  annotate("text", x = 30, y = -5000, label = "10 admissions", color = "red") +
  theme_light()
```

**Admission hour**
```{r, eval = TRUE}
adm_hour %>%
  ggplot(aes(x = value)) +
  geom_bar(fill = "lightskyblue",
           color = "darkblue") +
  labs(
    x = "Admission hour",
    y = "Number of admissions",
    title = "Admission hour"
  ) +
  theme_light()
```

**Admission minute**
```{r, eval = TRUE}
top4admmin <- adm_minute %>% 
              count(value) %>% 
              arrange(desc(n)) %>%
              slice_head(n = 4)

adm_minute %>%
  ggplot(aes(x = as.numeric(value))) +
  geom_histogram(binwidth = 1,
                 color = "darkblue",
                 fill = "lightskyblue") +
  
  labs(
    x = "Admission minute",
    y = "Number of admissions",
    title = "Admission minute"
  ) +
  annotate("text", 
           x = as.numeric(top4admmin[1,1]), 
           y = as.numeric(top4admmin[1,2]) + 1000 , 
           label = str_c(top4admmin[1,1], ": ", top4admmin[1,2]), 
           color = "red") +
  annotate("text", 
           x = as.numeric(top4admmin[2,1]), 
           y = as.numeric(top4admmin[2,2]) + 1000 , 
           label = str_c(top4admmin[2,1], ": ", top4admmin[2,2]), 
           color = "red") +
  annotate("text", 
           x = as.numeric(top4admmin[3,1]), 
           y = as.numeric(top4admmin[3,2]) + 1000 ,
           label = str_c(top4admmin[3,1], ": ", top4admmin[3,2]), 
           color = "red") +
  annotate("text", 
           x = as.numeric(top4admmin[4,1]), 
           y = as.numeric(top4admmin[4,2]) + 1000 ,
           label = str_c(top4admmin[4,1], ": ", top4admmin[4,2]), 
           color = "red") +
  theme_light()
```


**Length of hospital stay**
```{r, eval = TRUE}
adm_los %>%
  ggplot(aes(x = los)) +
  geom_histogram(binwidth = 24,
                 color = "darkblue",
                 fill = "lightskyblue") +
  labs(
    x = "Length of hospital stay (hours)",
    y = "Number of admissions",
    title = "Length of hospital stay"
  ) +
  theme_light()

adm_los %>%
  filter(los < 1000) %>%
  ggplot(aes(x = los)) +
  geom_histogram(binwidth = 24,
                 color = "darkblue",
                 fill = "lightskyblue") +
  labs(
    x = "Length of hospital stay (hours)",
    y = "Number of admissions",
    title = "Length of hospital stay (< 1,000 hours)"
  ) +
  theme_light()
```

- The number of admissions per patient is right-skewed, with most patients having 1 or 2 admissions. There are some outliers distributed evenly from more than 25 admissions, among which we can see a patient that has 238 admissions which is far more than the rest.

```{r, eval = TRUE}
adm_count %>% arrange(desc(n))
```

- The admission hour is not showing any unusual pattern. The most admissions occur at 12 a.m. at the midnight and generally there are more admissions from 14 p.m. to 12 a.m. than the rest of the day. Also we can see that there are more admissions at 7 a.m. than the nearby hours.

- The admission minute is almost distributed evenly, except for the top 4 minutes which are `00`, `15`, `30`, and `45`, with frequency of `26,319`, `22,243`, `12,673`, and `9,239`, respectively.

- The length of hospital stay (los) is right-skewed, with most admissions having a length of stay less than 100 hours.

## Q4. `patients` data

Patient information is available in `patients.csv.gz`. See <https://mimic.mit.edu/docs/iv/modules/hosp/patients/> for details of each field in this file. The first 10 lines are
```{bash}
zcat < ~/mimic/hosp/patients.csv.gz | head
```

### Q4.1 Ingestion

Import `patients.csv.gz` (<https://mimic.mit.edu/docs/iv/modules/hosp/patients/>) as a tibble `patients_tble`.

#### Answer:

```{r, eval = TRUE}
patients_tble <- read_csv("~/mimic/hosp/patients.csv.gz")
patients_tble
```

### Q4.2 Summary and visualization

Summarize variables `gender` and `anchor_age` by graphics, and explain any patterns you see.

#### Answer:

Plot `gender`:
```{r, eval = TRUE}
patients_tble %>% ggplot() +
  geom_bar(aes(x = gender),
           color = "darkblue",
           fill = "lightskyblue") +
  labs(
    x = "Gender",
    y = "Count",
    title = "Gender count"
  ) +
  scale_x_discrete(labels = c("Female", "Male"))
  theme_light()
```

Plot `anchor_age`:
```{r, eval = TRUE}
patients_tble %>% ggplot() +
  geom_histogram(aes(x = anchor_age, fill = gender),
                 binwidth = 5,
                 color = "black") +
  labs(
    x = "Age",
    y = "Count",
    title = "Age distribution vs. Gender"
  ) +
  guides(fill = guide_legend(title = "Gender")) +
  theme_light()
```

- There are slightly more female patients than male patients in the `patient.csv.gz` data set. The total number of female patients is slightly over `150,000`, while the total number of male patients is slightly below `150,000`.

- The age distribution is right-skewed, with most patients being younger than 30 years old. The number of patients shows a decreasing trend as age increases when age is greater than 55 years old. In general, the proportion of 2 genders in each age group is similar, some times female is slightly more than male.

## Q5. Lab results

`labevents.csv.gz` (<https://mimic.mit.edu/docs/iv/modules/hosp/labevents/>) contains all laboratory measurements for patients. The first 10 lines are
```{bash}
zcat < ~/mimic/hosp/labevents.csv.gz | head
```

`d_labitems.csv.gz` (<https://mimic.mit.edu/docs/iv/modules/hosp/d_labitems/>) is the dictionary of lab measurements. 
```{bash}
zcat < ~/mimic/hosp/d_labitems.csv.gz | head
```

We are interested in the lab measurements of creatinine (50912), potassium (50971), sodium (50983), chloride (50902), bicarbonate (50882), hematocrit (51221), white blood cell count (51301), and glucose (50931). Retrieve a subset of `labevents.csv.gz` that only containing these items for the patients in `icustays_tble`. Further restrict to the last available measurement (by `storetime`) before the ICU stay. The final `labevents_tble` should have one row per ICU stay and columns for each lab measurement.

![](labevents_tble.png)


Hint: Use the Parquet format you generated in Homework 2. For reproducibility, make `labevents_pq` folder available at the current working directory `hw3`, for example, by a symbolic link.

#### Answer:

```{r, eval = TRUE}
labevents_tble <- labevents_tble %>%
  filter(itemid %in% c(50912, 50971, 50983, 50902, 50882, 51221, 51301, 
                       50931)) %>%
  filter(subject_id %in% icustays_tble$subject_id)
labevents_tble
```

```{r, eval = TRUE}
# Step 1: Join the tables on subject_id
joined_tble <- icustays_tble %>%
  left_join(labevents_tble, by = "subject_id")
joined_tble

# Step 2: Filter rows where lab event storetime is before ICU stay intime
pre_icu_labevents <- joined_tble %>%
  filter(storetime < intime)
pre_icu_labevents

# Step 3: Pick out the storetime that is maximized but not greater than intime
last_labevents_pre_icu <- pre_icu_labevents %>%
  group_by(subject_id, stay_id, itemid) %>% 
  summarise(storetime = max(storetime)) 
# Get maximum storetime for each group
# Group: per itemid for per stay for per patient
last_labevents_pre_icu

# Step 4: Join the last lab events before ICU stay with the pre_icu_labevents
final_labevents_pre_icu <- last_labevents_pre_icu %>%
  left_join(pre_icu_labevents, 
            by = c("subject_id", "stay_id", "storetime", "itemid"))
final_labevents_pre_icu

# Step 5: Pivot wider
wider_lab <- final_labevents_pre_icu %>%
  select(subject_id, stay_id, itemid, valuenum) %>%
  arrange(subject_id, stay_id) %>%
  pivot_wider(
    names_from = itemid,
    values_from = valuenum,
    values_fn = list(valuenum = last) # Use last to get the last measurement
  )
wider_lab

# Step 6: Rename the original itemid to the corresponding lab measurement
wider_lab <- wider_lab %>%
  rename(
    creatinine = `50912`,
    potassium = `50971`,
    sodium = `50983`,
    chloride = `50902`,
    bicarbonate = `50882`,
    hematocrit = `51221`,
    wbc = `51301`,
    glucose = `50931`
  )
wider_lab

labevents_tble <- wider_lab %>% ungroup()
labevents_tble 
```

## Q6. Vitals from charted events

`chartevents.csv.gz` (<https://mimic.mit.edu/docs/iv/modules/icu/chartevents/>) contains all the charted data available for a patient. During their ICU stay, the primary repository of a patient’s information is their electronic chart. The `itemid` variable indicates a single measurement type in the database. The `value` variable is the value measured for `itemid`. The first 10 lines of `chartevents.csv.gz` are
```{bash}
zcat < ~/mimic/icu/chartevents.csv.gz | head
```

`d_items.csv.gz` (<https://mimic.mit.edu/docs/iv/modules/icu/d_items/>) is the dictionary for the `itemid` in `chartevents.csv.gz`. 
```{bash}
zcat < ~/mimic/icu/d_items.csv.gz | head
```

We are interested in the vitals for ICU patients: heart rate (220045), systolic non-invasive blood pressure (220179), diastolic non-invasive blood pressure (220180), body temperature in Fahrenheit (223761), and respiratory rate (220210). Retrieve a subset of `chartevents.csv.gz` only containing these items for the patients in `icustays_tble`. Further restrict to the first vital measurement within the ICU stay. The final `chartevents_tble` should have one row per ICU stay and columns for each vital measurement. 

![](chartevents_tble.png)

Hint: Use the Parquet format you generated in Homework 2. For reproducibility, make `chartevents_pq` folder available at the current working directory, for example, by a symbolic link.

#### Answer:

```{r, eval = TRUE}
chartevents_tble <- read_parquet("chartevents_pq/part-0.parquet") %>%
  filter(subject_id %in% icustays_tble$subject_id)
chartevents_tble
chartevents_tble_backup <- chartevents_tble
```

```{r, eval = TRUE}
# Step 1: Pick out the minimum of charttime per ICU stay
first_chartevents_icu <- chartevents_tble %>%
  group_by(subject_id, stay_id, itemid) %>% 
  summarise(charttime = min(charttime))
first_chartevents_icu

# Step 2: Join the first_chartevents_icu with the chartevents_tble
final_chartevents_icu <- first_chartevents_icu %>%
  left_join(chartevents_tble, 
            by = c("subject_id", "stay_id", "charttime", "itemid"))
final_chartevents_icu

# Step 3: Pivot wider
wider_chart <- final_chartevents_icu %>%
  select(subject_id, stay_id, itemid, valuenum) %>%
  arrange(subject_id, stay_id) %>%
  pivot_wider(
    names_from = itemid,
    values_from = valuenum,
    values_fn = list(valuenum = first) # Use first to get the first measurement
  )
wider_chart

# Step 4: Rename the original itemid to the corresponding vital measurement
wider_chart <- wider_chart %>%
  rename(
    heart_rate = `220045`,
    non_invasive_blood_pressure_systolic = `220179`,
    non_invasive_blood_pressure_diastolic = `220180`,
    temperature_fahrenheit = `223761`,
    respiratory_rate = `220210`
  )
wider_chart

chartevents_tble <- wider_chart %>% ungroup()
```

```{r, eval = TRUE}
# Testing the behavior of summarise()
a <- tibble(
  time = c(1,1,2,2,3,3),
  value = c(5,2,3,4,9,6)
)

a %>%
  group_by(time) %>%
  summarise(value = max(value))
```

## Q7. Putting things together

Let us create a tibble `mimic_icu_cohort` for all ICU stays, where rows are all ICU stays of adults (age at `intime` >= 18) and columns contain at least following variables

- all variables in `icustays_tble`  
- all variables in `admissions_tble`  
- all variables in `patients_tble`
- the last lab measurements before the ICU stay in `labevents_tble` 
- the first vital measurements during the ICU stay in `chartevents_tble`

The final `mimic_icu_cohort` should have one row per ICU stay and columns for each variable.

![](mimic_icu_cohort.png)

#### Answer:

```{r, eval = TRUE}
# Step 1: Join the icustays_tble with the patients_tble
mimic_icu_cohort <- icustays_tble %>%
  left_join(patients_tble, by = "subject_id")

# Step 2: Calculate the true age by the time of intime
mimic_icu_cohort$intime_year <- mimic_icu_cohort %>%
  select(intime) %>%
  pull() %>%
  format("%Y") %>%
  as.numeric()

mimic_icu_cohort <- mimic_icu_cohort %>%
  mutate(age_intime = intime_year - anchor_year + anchor_age) %>%
  filter(age_intime >= 18) %>%
  select(-age_intime)

# Step 3: Join the mimic_icu_cohort with the admissions_tble
final_admit_pre_icu <- mimic_icu_cohort %>%
  left_join(admissions_tble, by = c("subject_id", "hadm_id")) %>%
  filter(admittime <= intime) %>%
  group_by(subject_id, stay_id) %>%
  summarise(admittime = max(admittime)) %>%
  ungroup()

mimic_icu_cohort <- mimic_icu_cohort %>%
  left_join(final_admit_pre_icu, by = c("subject_id", "stay_id"))

mimic_icu_cohort <- mimic_icu_cohort %>%
  left_join(admissions_tble, by = c("subject_id", "hadm_id", "admittime"))

# Step 4: Join the mimic_icu_cohort with labevents_tble
mimic_icu_cohort <- mimic_icu_cohort %>%
  left_join(labevents_tble, by = c("subject_id", "stay_id"))

# Step 5: Join the mimic_icu_cohort with chartevents_tble
mimic_icu_cohort <- mimic_icu_cohort %>%
  left_join(chartevents_tble, by = c("subject_id", "stay_id"))
mimic_icu_cohort %>% print(width = Inf)
```

## Q8. Exploratory data analysis (EDA)

Summarize the following information about the ICU stay cohort `mimic_icu_cohort` using appropriate numerics or graphs:

- Length of ICU stay `los` vs demographic variables (race, insurance, marital_status, gender, age at intime)

- Length of ICU stay `los` vs the last available lab measurements before ICU stay

- Length of ICU stay `los` vs the average vital measurements within the first hour of ICU stay

- Length of ICU stay `los` vs first ICU unit

